global !p
def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
    return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
    [x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
    return x != '0' and x != '0'

def find_matching_quotations(string, pos, count, char):
    print(string)
    print(pos)
    if string[pos] == char and (pos-1 < 0 or string[pos-1] != '\\'):
        count += 1
    if pos <= 0:
        return count % 2
    else:
        return find_matching_quotations(string, pos-1, count, char)
endglobal

snippet preamble "gives the default preamble" b
\documentclass[11pt]{scrartcl}
\usepackage[sexy]{evan}
\setlength{\parindent}{${1:0.0cm}}
\setlength{\parskip}{${2:0.25cm}}

\title{$3}
\author{${4:Michael Zhou}}
\date{${5:\today}}

\begin{document}
\maketitle

$0

\end{document}
endsnippet

snippet begin "begin{} / end{}" b
\begin{$1}$0
\end{$1}
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet asy "asymptote expansion" b
\begin{center}
\begin{asy}$1
\end{asy}
\end{center}
$0
endsnippet

snippet dm "Math" wA
\[
$1
.\] $0
endsnippet

#context "math()"
#snippet _ "subscript" iA
#_{$1}$0
#endsnippet

#context "math()"
#snippet ^ "superscript" iA
#^{$1}$0
#endsnippet

#context "math()"
#snippet '(\\left)(\(|\[|\{|\\langle|\||\\\||\\lceil|\\lfloor)' "left parenthesis" irA 
#\left`!p snip.rv=match.group(2)`$1 \right`!p
#if match.group(2) == '(':
#    snip.rv=')'
#elif match.group(2) == '[':
#    snip.rv=']'
#elif match.group(2) == '{':
#    snip.rv='}'
#elif match.group(2) == '\langle':
#    snip.rv='\rangle'
#elif match.group(2) == '|':
#    snip.rv='|'
#elif match.group(2) == '\|':
#    snip.rv='\|'
#elif match.group(2) == '\lceil':
#    snip.rv='\rceil'
#elif match.group(2) == '\lfloor':
#    snip.rv='rfloor'
#else:
#    snip.rv=''` $0
#endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

context "math()"
priority 1000
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

# context "(snip.column==0 or snip.buffer[snip.line][snip.column-1] != '\\') and (snip.column == len(snip.buffer[snip.line]) - 1 or re.match('\W', snip.buffer[snip.line][snip.column+1]))"
# pre_expand "snip.buffer[snip.line] = snip.buffer[snip.line][:snip.column] + snip.buffer[snip.line][snip.column+1:] if snip.column < len(snip.buffer[snip.line]) - 1 and snip.buffer[snip.line][snip.column+1] == '$' and find_matching_quotations(snip.buffer[snip.line][:snip.column], snip.column-1, 0, '$') else snip.buffer[snip.line][:snip.column] + '$$' + snip.buffer[snip.line][snip.column+1:] if (snip.column == 0 or re.match('\W', snip.buffer[snip.line][snip.column-1])) else snip.buffer[snip.line]; snip.cursor.set(snip.line, snip.column+1) 
# snippet $ "match dollar signs" Ai
# endsnippet


